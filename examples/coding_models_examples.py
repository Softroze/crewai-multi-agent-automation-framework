#!/usr/bin/env python3
"""
ุฃูุซูุฉ ูุชุฎุตุตุฉ ูุงุณุชุฎุฏุงู ุฃูุถู ููุงุฐุฌ ุชูููุฏ ุงูููุฏ ุงูุจุฑูุฌู ูู Hugging Face
"""

import os
from crewai import Agent, Task, Crew, Process
from crewai.llm import LLM
from crewai.models.model_manager import HuggingFaceModelManager

def create_python_developer():
    """ุฅูุดุงุก ูุทูุฑ Python ูุชุฎุตุต"""
    print("๐ ุฅูุดุงุก ูุทูุฑ Python ูุชุฎุตุต...")
    
    try:
        hf_manager = HuggingFaceModelManager()
        config = hf_manager.select_model(task_type="code_python")
        
        python_llm = LLM(
            model=config["model"],
            api_key=config["api_key"],
            base_url=config["base_url"],
            temperature=config["temperature"]
        )
        
        python_dev = Agent(
            role='Python Developer Expert',
            goal='ูุชุงุจุฉ ููุฏ Python ุนุงูู ุงูุฌูุฏุฉ ููุญุณู ููุฃุฏุงุก',
            backstory='ุฃูุช ูุทูุฑ Python ุฎุจูุฑ ูุน 10+ ุณููุงุช ุฎุจุฑุฉ ูู ุชุทููุฑ ุงูุชุทุจููุงุช ูุงูููุชุจุงุช.',
            verbose=True,
            llm=python_llm
        )
        
        python_task = Task(
            description='''
            ุงูุชุจ ููุงุณ Python ูุฅุฏุงุฑุฉ ูุงุนุฏุฉ ุจูุงูุงุช SQLite ูุน ุงูููุฒุงุช ุงูุชุงููุฉ:
            1. ุฅูุดุงุก ุงูุงุชุตุงู ูุฅุบูุงูู
            2. ุชูููุฐ ุงุณุชุนูุงูุงุช SELECT, INSERT, UPDATE, DELETE
            3. ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
            4. ุงุณุชุฎุฏุงู context managers
            5. ุฅุถุงูุฉ type hints
            6. ูุชุงุจุฉ docstrings ููุตูุฉ
            ''',
            agent=python_dev,
            expected_output='ููุงุณ Python ูุงูู ูุน ุงูุชูุซูู ูุงูุฃูุซูุฉ'
        )
        
        return Crew(
            agents=[python_dev],
            tasks=[python_task],
            verbose=2,
            process=Process.sequential
        )
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุทูุฑ Python: {e}")
        return None

def create_web_developer():
    """ุฅูุดุงุก ูุทูุฑ ููุจ ูุชุฎุตุต"""
    print("๐ ุฅูุดุงุก ูุทูุฑ ููุจ ูุชุฎุตุต...")
    
    try:
        hf_manager = HuggingFaceModelManager()
        config = hf_manager.select_model(task_type="code_web")
        
        web_llm = LLM(
            model=config["model"],
            api_key=config["api_key"],
            base_url=config["base_url"],
            temperature=config["temperature"]
        )
        
        web_dev = Agent(
            role='Full Stack Web Developer',
            goal='ุชุทููุฑ ุชุทุจููุงุช ููุจ ุญุฏูุซุฉ ูุณุฑูุนุฉ ุงูุงุณุชุฌุงุจุฉ',
            backstory='ุฃูุช ูุทูุฑ ููุจ full-stack ุฎุจูุฑ ูู React, Node.js, ูุชูููุงุช ุงูููุจ ุงูุญุฏูุซุฉ.',
            verbose=True,
            llm=web_llm
        )
        
        web_task = Task(
            description='''
            ุงูุชุจ ููููุงุช React ูุชุทุจูู ุฅุฏุงุฑุฉ ุงูููุงู (Todo App) ูุน:
            1. ูููู ุฑุฆูุณู TodoApp
            2. ูููู TodoList ูุนุฑุถ ุงูููุงู
            3. ูููู TodoItem ููู ูููุฉ
            4. ูููู AddTodo ูุฅุถุงูุฉ ููุงู ุฌุฏูุฏุฉ
            5. ุงุณุชุฎุฏุงู React Hooks (useState, useEffect)
            6. ุฅุถุงูุฉ TypeScript types
            7. ุชุตููู responsive ูุน CSS modules
            ''',
            agent=web_dev,
            expected_output='ููููุงุช React ูุงููุฉ ูุน TypeScript ู CSS'
        )
        
        return Crew(
            agents=[web_dev],
            tasks=[web_task],
            verbose=2,
            process=Process.sequential
        )
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุทูุฑ ุงูููุจ: {e}")
        return None

def create_sql_developer():
    """ุฅูุดุงุก ูุทูุฑ ููุงุนุฏ ุงูุจูุงูุงุช ูุชุฎุตุต"""
    print("๐๏ธ ุฅูุดุงุก ูุทูุฑ ููุงุนุฏ ุงูุจูุงูุงุช ูุชุฎุตุต...")
    
    try:
        hf_manager = HuggingFaceModelManager()
        config = hf_manager.select_model(task_type="code_sql")
        
        sql_llm = LLM(
            model=config["model"],
            api_key=config["api_key"],
            base_url=config["base_url"],
            temperature=config["temperature"]
        )
        
        sql_dev = Agent(
            role='Database Developer Expert',
            goal='ุชุตููู ููุชุงุจุฉ ุงุณุชุนูุงูุงุช SQL ูุญุณูุฉ ููุนุงูุฉ',
            backstory='ุฃูุช ุฎุจูุฑ ููุงุนุฏ ุงูุจูุงูุงุช ูุน ุฎุจุฑุฉ ุนูููุฉ ูู SQL ูุชุญุณูู ุงูุฃุฏุงุก.',
            verbose=True,
            llm=sql_llm
        )
        
        sql_task = Task(
            description='''
            ุตูู ูุงุนุฏุฉ ุจูุงูุงุช ููุธุงู ุฅุฏุงุฑุฉ ุงูููุชุจุฉ ูุงูุชุจ ุงูุงุณุชุนูุงูุงุช ุงูุชุงููุฉ:
            1. ุฅูุดุงุก ุงูุฌุฏุงูู (ุงููุชุจุ ุงููุคููููุ ุงูุฃุนุถุงุกุ ุงูุงุณุชุนุงุฑุงุช)
            2. ุงุณุชุนูุงู ูุนุฑุถ ุงููุชุจ ุงููุชุงุญุฉ ูุน ูุนูููุงุช ุงููุคูู
            3. ุงุณุชุนูุงู ูุนุฑุถ ุชุงุฑูุฎ ุงุณุชุนุงุฑุงุช ุนุถู ูุนูู
            4. ุงุณุชุนูุงู ูุฅูุฌุงุฏ ุงููุชุจ ุงูุฃูุซุฑ ุงุณุชุนุงุฑุฉ
            5. ุงุณุชุนูุงู ูุนุฑุถ ุงููุชุจ ุงููุชุฃุฎุฑุฉ ูู ุงูุฅุฑุฌุงุน
            6. ุฅุถุงูุฉ indexes ูุชุญุณูู ุงูุฃุฏุงุก
            7. ูุชุงุจุฉ stored procedures ููุนูููุงุช ุงูุดุงุฆุนุฉ
            ''',
            agent=sql_dev,
            expected_output='ุณูุฑูุจุช SQL ูุงูู ูุน ุงูุฌุฏุงูู ูุงูุงุณุชุนูุงูุงุช ูุงูููุงุฑุณ'
        )
        
        return Crew(
            agents=[sql_dev],
            tasks=[sql_task],
            verbose=2,
            process=Process.sequential
        )
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุทูุฑ SQL: {e}")
        return None

def create_algorithms_expert():
    """ุฅูุดุงุก ุฎุจูุฑ ุฎูุงุฑุฒููุงุช"""
    print("๐งฎ ุฅูุดุงุก ุฎุจูุฑ ุงูุฎูุงุฑุฒููุงุช...")
    
    try:
        hf_manager = HuggingFaceModelManager()
        config = hf_manager.select_model(task_type="code_algorithms")
        
        algo_llm = LLM(
            model=config["model"],
            api_key=config["api_key"],
            base_url=config["base_url"],
            temperature=config["temperature"]
        )
        
        algo_expert = Agent(
            role='Algorithms and Data Structures Expert',
            goal='ุญู ุงููุดุงูู ุงูุฎูุงุฑุฒููุฉ ุงููุนูุฏุฉ ุจููุงุกุฉ ุนุงููุฉ',
            backstory='ุฃูุช ุฎุจูุฑ ูู ุงูุฎูุงุฑุฒููุงุช ูููุงูู ุงูุจูุงูุงุช ูุน ุฎุจุฑุฉ ูู ุงูุจุฑูุฌุฉ ุงูุชูุงูุณูุฉ.',
            verbose=True,
            llm=algo_llm
        )
        
        algo_task = Task(
            description='''
            ุญู ุงููุดุงูู ุงูุฎูุงุฑุฒููุฉ ุงูุชุงููุฉ ุจู Python:
            1. ุชุทุจูู ุฎูุงุฑุฒููุฉ Dijkstra ูุฅูุฌุงุฏ ุฃูุตุฑ ูุณุงุฑ
            2. ุชุทุจูู Binary Search Tree ูุน ุนูููุงุช ุงูุฅุฏุฑุงุฌ ูุงูุญุฐู ูุงูุจุญุซ
            3. ุญู ูุดููุฉ Longest Common Subsequence ุจุงุณุชุฎุฏุงู Dynamic Programming
            4. ุชุทุจูู ุฎูุงุฑุฒููุฉ Quick Sort ูุน ุชุญุณููุงุช
            5. ุญู ูุดููุฉ Two Sum ูุฌููุน ุงููุชุบูุฑุงุช
            
            ููู ุญู:
            - ุงูุชุจ ุงูููุฏ ูุน ุงูุชุนูููุงุช
            - ุญูู ุงูุชุนููุฏ ุงูุฒููู ูุงูููุงูู
            - ุฃุถู test cases
            - ุงูุชุฑุญ ุชุญุณููุงุช ููููุฉ
            ''',
            agent=algo_expert,
            expected_output='ุญููู ุฎูุงุฑุฒููุฉ ูุงููุฉ ูุน ุงูุชุญููู ูุงูุงุฎุชุจุงุฑุงุช'
        )
        
        return Crew(
            agents=[algo_expert],
            tasks=[algo_task],
            verbose=2,
            process=Process.sequential
        )
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ุฎุจูุฑ ุงูุฎูุงุฑุฒููุงุช: {e}")
        return None

def create_data_science_developer():
    """ุฅูุดุงุก ูุทูุฑ ุนููู ุงูุจูุงูุงุช"""
    print("๐ ุฅูุดุงุก ูุทูุฑ ุนููู ุงูุจูุงูุงุช...")
    
    try:
        hf_manager = HuggingFaceModelManager()
        config = hf_manager.select_model(task_type="code_data_science")
        
        ds_llm = LLM(
            model=config["model"],
            api_key=config["api_key"],
            base_url=config["base_url"],
            temperature=config["temperature"]
        )
        
        ds_dev = Agent(
            role='Data Science Developer',
            goal='ุชุทููุฑ ุญููู ุนููู ุงูุจูุงูุงุช ูุงูุชุนูู ุงูุขูู',
            backstory='ุฃูุช ุฎุจูุฑ ูู ุนููู ุงูุจูุงูุงุช ูุงูุชุนูู ุงูุขูู ูุน ุฎุจุฑุฉ ูู Python ูุฃุฏูุงุชู.',
            verbose=True,
            llm=ds_llm
        )
        
        ds_task = Task(
            description='''
            ุงูุชุจ ูุดุฑูุน ุชุญููู ุจูุงูุงุช ูุงูู ูุชููุน ุฃุณุนุงุฑ ุงูููุงุฒู:
            1. ุชุญููู ูุชูุธูู ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู pandas
            2. ุชุญููู ุงุณุชูุดุงูู ููุจูุงูุงุช (EDA) ูุน matplotlib/seaborn
            3. ูุนุงูุฌุฉ ุงูุจูุงูุงุช ุงูููููุฏุฉ ูุงูููู ุงูุดุงุฐุฉ
            4. ููุฏุณุฉ ุงูููุฒุงุช (Feature Engineering)
            5. ุชุฏุฑูุจ ููุงุฐุฌ ูุฎุชููุฉ (Linear Regression, Random Forest, XGBoost)
            6. ุชูููู ุงูููุงุฐุฌ ูุถุจุท ุงููุนุงููุงุช
            7. ุญูุธ ุงููููุฐุฌ ุงูุฃูุถู
            8. ุฅูุดุงุก pipeline ููุชูุจุค
            
            ุงุณุชุฎุฏู ุฃูุถู ุงูููุงุฑุณุงุช ูู ุนููู ุงูุจูุงูุงุช.
            ''',
            agent=ds_dev,
            expected_output='ูุดุฑูุน ุนููู ุจูุงูุงุช ูุงูู ูุน ุงูููุฏ ูุงูุชุญููู'
        )
        
        return Crew(
            agents=[ds_dev],
            tasks=[ds_task],
            verbose=2,
            process=Process.sequential
        )
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุทูุฑ ุนููู ุงูุจูุงูุงุช: {e}")
        return None

def display_coding_models():
    """ุนุฑุถ ุฌููุน ููุงุฐุฌ ุงูุจุฑูุฌุฉ ุงููุชุงุญุฉ"""
    print("\n๐ค ููุงุฐุฌ ุงูุจุฑูุฌุฉ ุงููุชุงุญุฉ:")
    print("=" * 60)
    
    try:
        hf_manager = HuggingFaceModelManager()
        coding_models = hf_manager.get_coding_models()
        
        for task_type, info in coding_models.items():
            print(f"\n๐ {task_type}:")
            print(f"   ุงููููุฐุฌ: {info['model_key']}")
            print(f"   ุงููุตู: {info['description']}")
            print(f"   ุงูุญุฌู: {info['size']}")
            print(f"   ููุงุท ุงูููุฉ: {', '.join(info['strengths'])}")
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุนุฑุถ ุงูููุงุฐุฌ: {e}")

def main():
    """ุชุดุบูู ุฌููุน ุฃูุซูุฉ ููุงุฐุฌ ุงูุจุฑูุฌุฉ"""
    print("๐ ุจุฏุก ุชุดุบูู ุฃูุซูุฉ ููุงุฐุฌ ุงูุจุฑูุฌุฉ ุงููุชูุฏูุฉ")
    print("=" * 70)
    
    # ุงูุชุญูู ูู ูุฌูุฏ ููุชุงุญ API
    if not os.getenv("HUGGINGFACE_API_KEY"):
        print("โ ููุชุงุญ HUGGINGFACE_API_KEY ุบูุฑ ููุฌูุฏ!")
        print("ูุฑุฌู ุฅุถุงูุฉ ููุชุงุญ Hugging Face API ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ.")
        return
    
    # ุนุฑุถ ุงูููุงุฐุฌ ุงููุชุงุญุฉ
    display_coding_models()
    
    # ูุงุฆูุฉ ุงููุทูุฑูู ุงููุชุฎุตุตูู
    developers = [
        ("ูุทูุฑ Python", create_python_developer),
        ("ูุทูุฑ ุงูููุจ", create_web_developer),
        ("ูุทูุฑ ููุงุนุฏ ุงูุจูุงูุงุช", create_sql_developer),
        ("ุฎุจูุฑ ุงูุฎูุงุฑุฒููุงุช", create_algorithms_expert),
        ("ูุทูุฑ ุนููู ุงูุจูุงูุงุช", create_data_science_developer)
    ]
    
    results = {}
    
    for dev_name, dev_function in developers:
        print(f"\n๐ฏ ุชุดุบูู {dev_name}...")
        print("-" * 50)
        
        crew = dev_function()
        if crew:
            try:
                result = crew.kickoff()
                results[dev_name] = result
                print(f"โ {dev_name} ุงูุชูู ุจูุฌุงุญ!")
            except Exception as e:
                print(f"โ ุฎุทุฃ ูู ุชุดุบูู {dev_name}: {e}")
                results[dev_name] = f"ุฎุทุฃ: {e}"
        else:
            results[dev_name] = "ูุดู ูู ุงูุฅุนุฏุงุฏ"
    
    # ุนุฑุถ ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ
    print("\n" + "=" * 70)
    print("๐ ููุฎุต ูุชุงุฆุฌ ููุงุฐุฌ ุงูุจุฑูุฌุฉ:")
    print("=" * 70)
    
    for dev_name, result in results.items():
        print(f"\n๐ธ {dev_name}:")
        if isinstance(result, str) and ("ุฎุทุฃ" in result or "ูุดู" in result):
            print(f"   โ {result}")
        else:
            print(f"   โ ุชู ุจูุฌุงุญ")
            # ุนุฑุถ ุฌุฒุก ูู ุงููุชูุฌุฉ
            result_preview = str(result)[:300] + "..." if len(str(result)) > 300 else str(result)
            print(f"   ๐ ูุนุงููุฉ: {result_preview}")

if __name__ == "__main__":
    main()
